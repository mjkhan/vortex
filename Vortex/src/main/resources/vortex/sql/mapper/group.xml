<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="group">

<resultMap id="groupRow" type="group">
	<id property="type" column="GRP_TYPE"/>
	<id property="id" column="GRP_ID"/>
	<result property="name" column="GRP_NAME"/>
	<result property="description" column="DESCRP"/>
	<result property="createdBy" column="INS_ID"/>
	<result property="createdAt" column="INS_TIME"/>
	<result property="modifiedBy" column="UPD_ID"/>
	<result property="lastModified" column="UPD_TIME"/>
	<result property="status" column="STATUS"/>
</resultMap>
	
<!-- 그룹 목록 찾기 -->
<select id="search" parameterType="hashmap" resultType="dataobject">
<if test="fetch != null and fetch &gt; 0"><!-- 페이징 필요 시 -->
	SELECT SQL_CALC_FOUND_ROWS *
	FROM TBL_GROUP
	WHERE GRP_TYPE = #{groupType}
	<if test="field != null and value != null">
	AND ${field} LIKE CONCAT(#{value}, '%')
	</if>
	<if test="status == null">AND STATUS &lt;&gt; '999'</if> 
	<if test="status != null">AND STATUS = #{status}</if> 
	<if test="order == null">ORDER BY GRP_ID</if>
	<if test="order != null">ORDER BY #{order}</if>
	LIMIT #{start}, #{fetch} 
</if>
<if test="fetch == null or fetch == 0"><!-- 페이징 불필요 시 -->
	SELECT * FROM TBL_GROUP
	WHERE GRP_TYPE = #{groupType}
	<if test="field != null and value != null">
	AND #{field} LIKE CONCAT(#{value}, '%')
	</if>
	<if test="status == null">AND STATUS &lt;&gt; '999'</if> 
	<if test="status != null">AND STATUS = #{status}</if> 
	<if test="order == null">ORDER BY GRP_ID</if>
	<if test="order != null">ORDER BY #{order}</if>
</if>
</select>

<sql id="select-by-id">
SELECT *
FROM TBL_GROUP
WHERE GRP_TYPE = #{groupType}
AND GRP_ID = #{groupID}
</sql>
	
<!-- ID별 그룹 정보 가져오기 -->
<select id="getInfo" parameterType="hashmap" resultType="dataobject">
<include refid="select-by-id"/>
</select>
	
<!-- ID별 Group 가져오기 -->
<select id="getGroup" parameterType="hashmap" resultMap="groupRow">
<include refid="select-by-id"/>
</select>

<!-- 그룹 정보 생성 -->
<insert id="insert" parameterType="hashmap">
<selectKey keyProperty="group.id" resultType="string" order="BEFORE">
SELECT LPAD(IFNULL(CAST(MAX(GRP_ID) AS UNSIGNED) + 1, 1), 3, '0') NEW_ID
FROM TBL_GROUP
WHERE GRP_TYPE = #{group.type}
</selectKey>
INSERT INTO TBL_GROUP (
	GRP_TYPE
  , GRP_ID
  , GRP_NAME
  , DESCRP
  , INS_ID
  , INS_TIME
  , UPD_ID
  , UPD_TIME
  , STATUS
) VALUES (
	#{group.type}
  , #{group.id}
  , #{group.name}
  , #{group.description}
  , #{currentUser.id}
  , CURRENT_TIMESTAMP
  , #{currentUser.id}
  , CURRENT_TIMESTAMP
  , '001'
)
</insert>

<!-- 그룹 정보 수정 -->
<update id="update" parameterType="hashmap">
UPDATE TBL_GROUP SET
	GRP_NAME = #{group.name}
  , DESCRP = #{group.description}
  , UPD_ID = #{currentUser.id}
  , UPD_TIME = CURRENT_TIMESTAMP
WHERE GRP_TYPE = #{group.type}
AND GRP_ID = #{group.id}
</update>

<!-- groupIDs의 그룹 정보의 상태를 status로 변경 -->
<update id="setStatus" parameterType="hashmap">
UPDATE TBL_GROUP SET
	STATUS = #{status}
  , UPD_ID = #{currentUser.id}
  , UPD_TIME = CURRENT_TIMESTAMP
WHERE GRP_TYPE = #{groupType}
<if test="groupIDs != null">
AND GRP_ID IN (<foreach collection="groupIDs" item="groupID" separator=", ">#{groupID}</foreach>)
</if>
</update>

<!-- groupIDs의 그룹 정보를 삭제 -->
<delete id="delete" parameterType="hashmap">
DELETE FROM TBL_GROUP
WHERE GRP_TYPE = #{groupType}
<if test="groupIDs != null">
AND GRP_ID IN (<foreach collection="groupIDs" item="groupID" separator=", ">#{groupID}</foreach>)
</if>
</delete>

<!-- groupIDs의 그룹에 소속원 정보를 추가 -->
<insert id="addMembers" parameterType="hashmap">
INSERT INTO TBL_GROUP_MEMBER(GRP_TYPE, GRP_ID, MB_TYPE, MB_ID, INS_ID, INS_TIME)
SELECT #{groupType}, GRP_ID, #{memberType}, MB_ID, #{currentUser.id}, CURRENT_TIMESTAMP
FROM (
<foreach collection="groupIDs" item="groupID" separator=" UNION">SELECT #{groupID} GRP_ID</foreach>
) A, (
<foreach collection="memberIDs" item="memberID" separator=" UNION">SELECT #{memberID} MB_ID</foreach>
) B
WHERE NOT EXISTS (
	SELECT GRP_ID, MB_ID
	FROM TBL_GROUP_MEMBER C
	WHERE GRP_TYPE = #{groupType}
	AND MB_TYPE = #{memberType}
	AND C.GRP_ID = A.GRP_ID
	AND C.MB_ID = B.MB_ID
)
</insert>

<!-- 그룹에서 소속원 정보를 삭제 -->
<delete id="deleteMembers" parameterType="hashmap">
DELETE FROM TBL_GROUP_MEMBER
WHERE GRP_TYPE = #{groupType}
<if test="groupIDs != null">AND GRP_ID IN (<foreach collection="groupIDs" item="groupID" separator=", ">#{groupID}</foreach>)</if>
<if test="mbType != null">AND MB_TYPE = #{memberType}</if>
<if test="memberIDs != null">AND MB_ID IN (<foreach collection="memberIDs" item="memberID" separator=", ">#{memberID}</foreach>)</if>
</delete>

<!-- 그룹 소속원 정렬 순서 변경 -->
<update id="reorderMembers" parameterType="hashmap">
UPDATE TBL_GROUP_MEMBER SET
SRT_ORD = CASE MB_ID<foreach collection="memberIDs" item="memberID" index="i">WHEN #{memberID} THEN #{i}</foreach> ELSE 99999 END
WHERE GRP_TYPE = #{groupType}
AND GRP_ID = #{groupID}
AND MB_TYPE = #{memberType}
</update>

</mapper>